# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# ComplainFeatureToWangGe.py
# Created on: 2014-06-13 15:54:53.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: ComplainFeatureToWangGe <SelectSQL> <FieldName> <Type> 
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import time,datetime
import os
import random
import logging
import gc

spatialReference = arcpy.SpatialReference(4326)
LOG_FILE_NAME = "E:\\GisPython\\logs\\CreateComplainSheetMonth.log"
logging.basicConfig(filename=LOG_FILE_NAME,level=logging.INFO)
logging.basicConfig(filename=LOG_FILE_NAME,level=logging.ERROR)


def dataGis2Table(gisTable,dataTable):
    resultCurs = arcpy.InsertCursor(dataTable)
    GisDataCursors = arcpy.SearchCursor(gisTable)
    GisDataRow=GisDataCursors.next()
    while GisDataRow:
        resultRow = resultCurs.newRow()
        dateId = GisDataRow.TSRQ
        resultDis = GisDataRow.DISTANCE
        if not resultDis is None:
            distance = GisDataRow.DISTANCE/0.0009*100
            resultRow.setValue("DISTANCE",round(distance,3))
        resultRow.setValue("DATEID",dateId.strftime("%Y%m"))
        resultRow.setValue("CITY_NAME",GisDataRow.CITY)
        resultRow.setValue("COUNTRY",GisDataRow.COUNTY)
        resultRow.setValue("GRID_NAME",GisDataRow.GRID)
        resultRow.setValue("WORK_ORDER_ID",GisDataRow.WORK_ORDER_ID)
        resultRow.setValue("W_LONGITUDE",GisDataRow.LON)
        resultRow.setValue("W_LATITUDE",GisDataRow.LAT)
        resultRow.setValue("W_COUNT",GisDataRow.grid_code)
        resultRow.setValue("ADDRESS_NAME",GisDataRow.NAME)
        resultRow.setValue("ADDRESS_TYPE",GisDataRow.CnType)
        resultRow.setValue("A_LONGITUDE",GisDataRow.LON_1)
        resultRow.setValue("A_LATITUDE",GisDataRow.LAT_1)
        resultRow.setValue("NETWORK",GisDataRow.NETWORK_TYPE)
        resultCurs.insertRow(resultRow)
        GisDataRow=GisDataCursors.next()

        
def createComplainRasterFeature(SelectSQL,InputComplainFeatures,POIFeatures,FinalResultFeature):
    logging.info("Process: 创建"+FinalResultFeature)
    if(arcpy.Exists(FinalResultFeature)):
        arcpy.Delete_management(FinalResultFeature, "FeatureClass")
    rmNo = random.randint(100000000,999999999)
    print rmNo
    # Process: 筛选
    print "Process: 筛选"
    logging.info("Process: 筛选")
    FeatureSelect=arcpy.Select_analysis(InputComplainFeatures, "in_memory/FeatureSelect"+repr(rmNo), SelectSQL)
    # Process: 点转栅格
    print FeatureSelect
    rowSear =  arcpy.SearchCursor(FeatureSelect)
    row = rowSear.next()
    if(row):
        print "Process: 点转栅格"
        logging.info("Process: 点转栅格")
        tempEnvironment0 = arcpy.env.extent
        arcpy.env.extent = "115 23 122 29"
        ResultRaster=arcpy.PointToRaster_conversion(FeatureSelect, "OBJECTID", "in_memory/ResultRaster"+repr(rmNo), "COUNT", "NONE", ".0018")
        arcpy.env.extent = tempEnvironment0
        # Process: 栅格转点 
        print "Process: 栅格转点"
        logging.info("Process: 栅格转点")
        COMPLAIN_RASTER_POINTS=arcpy.RasterToPoint_conversion(ResultRaster, "in_memory/COMPLAIN_RASTER_POINTS"+repr(rmNo), "VALUE")
        print "Process: 空间连接"
        # Process: 空间连接
        COMPLAIN_POI_UNION=arcpy.SpatialJoin_analysis(COMPLAIN_RASTER_POINTS, POI, "in_memory/COMPLAIN_POI_UNION"+repr(rmNo), "JOIN_ONE_TO_ONE", "KEEP_ALL", "","CLOSEST", ".1 DecimalDegrees", "DISTANCE")
        print "Process: 点转栅格 (2)"
        logging.info("Process: 点转栅格 (2)")
        # Process: 点转栅格 (2)
        tempEnvironment0 = arcpy.env.extent
        arcpy.env.extent = "115 23 122 29"
        ResultRaster2=arcpy.PointToRaster_conversion(COMPLAIN_POI_UNION, "OBJECTID", "in_memory/ResultRaster2"+repr(rmNo), "MOST_FREQUENT", "NONE", ".0018")
        arcpy.env.extent = tempEnvironment0
        print "Process: 栅格转面"
        logging.info("Process: 栅格转面")
        # Process: 栅格转面
        ResultFeature=arcpy.RasterToPolygon_conversion(ResultRaster2, "in_memory/ResultFeature"+repr(rmNo), "NO_SIMPLIFY", "VALUE")
        print "Process: 空间连接 (2)"
        logging.info("Process: 空间连接 (2)")
        # Process: 空间连接 (2)
        ResultFeatureZj=arcpy.SpatialJoin_analysis(ResultFeature, COMPLAIN_POI_UNION, "in_memory/ResultFeatureZj"+repr(rmNo), "JOIN_ONE_TO_ONE", "KEEP_ALL", "", "INTERSECT", "", "")
        # Process: 空间连接 (3)
        arcpy.SpatialJoin_analysis(FeatureSelect, ResultFeatureZj, FinalResultFeature, "JOIN_ONE_TO_ONE", "KEEP_ALL", "", "INTERSECT", "", "")
        #arcpy.SpatialJoin_analysis(FeatureSelect, ResultFeatureZj, FinalResultFeature, "JOIN_ONE_TO_ONE", "KEEP_ALL", "TIME \"TIME\" true true false 8 Date 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\GIS_OBJECT_COMPLAIN_Select1,TIME,-1,-1;WORK_ORDER_ID \"WORK_ORDER_ID\" true true false 100 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\GIS_OBJECT_COMPLAIN_Select1,WORK_ORDER_ID,-1,-1;DISTANCE \"DISTANCE\" true true false 8 Double 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,DISTANCE,-1,-1;POINTID \"POINTID\" true true false 4 Long 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,POINTID,-1,-1;GRID_CODE \"聚合数\" true true false 4 Long 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,GRID_CODE,-1,-1;Name \"聚合地址\" true true false 160 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,Name,-1,-1;Ctype \"聚合地址类型(原始)\" true true false 64 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,Ctype,-1,-1;CnType \"聚合地址类型\" true true false 50 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,CnType,-1,-1;CITY \"地市\" true true false 32 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,CITY,-1,-1;COUNTY \"区县\" true true false 32 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,COUNTY,-1,-1;GRID \"GRID\" true true false 32 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,GRID,-1,-1;SGLON \"栅格POI经度\" true true false 8 Double 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,SGLON,-1,-1;SGLAT \"栅格POI纬度\" true true false 8 Double 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,SGLAT,-1,-1;CQ_REGION \"城区网格所属区域\" true true false 60 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,CQ_REGION,-1,-1;CQ_REGION_TYPE \"城区网格区域属性\" true true false 60 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,CQ_REGION_TYPE,-1,-1;TEST_ID \"测试网格ID\" true true false 10 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,TEST_ID,-1,-1;TEST_GRIDID \"测试网格编号\" true true false 20 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,TEST_GRIDID,-1,-1;TEST_CLASS \"测试网格类型\" true true false 10 Text 0 0 ,First,#,D:\\HasmbyGis\\Cache.gdb\\Complain20140509_SpatialJoin,TEST_CLASS,-1,-1", "INTERSECT", "", "")

        
        arcpy.Delete_management(COMPLAIN_POI_UNION)
        arcpy.Delete_management(COMPLAIN_RASTER_POINTS)
        arcpy.Delete_management(ResultRaster)
        arcpy.Delete_management(ResultRaster2)
        arcpy.Delete_management(ResultFeature)
        arcpy.Delete_management(ResultFeatureZj)
        del COMPLAIN_POI_UNION,COMPLAIN_RASTER_POINTS,ResultRaster,ResultRaster2,ResultFeature,ResultFeatureZj
    arcpy.Delete_management(FeatureSelect)
    del FeatureSelect,rowSear
    logging.info("清理内存~~")
    gc.collect()
    
if __name__ == '__main__':
    try:
        startTime = time.localtime(time.time())
        print time.strftime('%Y-%m-%d %H:%M:%S',startTime)
        logging.info(time.strftime('%Y-%m-%d %H:%M:%S',startTime))
        print datetime.datetime.weekday(datetime.datetime.now())
        GISDBPath = "WangYouTouSu60.sde"
        InsertPath = "WangYouGis_Oracle97.sde"
        curDay = startTime.tm_mday
        lastMonthEnd = datetime.datetime.now()-datetime.timedelta(days=curDay)
        lastMonthStart = datetime.date(lastMonthEnd.year,lastMonthEnd.month,1)
        print lastMonthStart.strftime('%Y-%m-%d 00:00:00')
        print lastMonthEnd.strftime('%Y-%m-%d 00:00:00')
        ArcCatalogPath = "C:\\Users\\Administrator\\AppData\\Roaming\\ESRI\\Desktop10.3\\ArcCatalog"
        InputFeatures = ArcCatalogPath+"\\"+GISDBPath+"\\WangYouTouSu.DBO.GIS_TOUSU_MONTH"
        POI = ArcCatalogPath+"\\"+GISDBPath+"\\WangYouTouSu.DBO.POI_POINTS_AREA"
        ComplainSheetMonth =ArcCatalogPath+"\\"+GISDBPath+"\\WangYouTouSu.DBO.COMPLAIN_TOUSU_SHEET_MONTH_TMP"
        InsertDataMonth = ArcCatalogPath+"\\"+InsertPath+"\\WANGYOU.F_QL_WT_TOUSU_MONTH"
        arcpy.env.outputCoordinateSystem = arcpy.SpatialReference("WGS 1984")
        print "crarte tmp...begin"
        selectCompSQL ="(TSLB_ID='网络覆盖' or TSLB_ID='手机上网' or TSLB_ID='数据卡（含MIFI）' or TSLB_ID='通话质量') and (TSRQ >= '"+lastMonthStart.strftime('%Y-%m-%d 00:00:00')+"' and  TSRQ <= '"+lastMonthEnd.strftime('%Y-%m-%d 23:59:59')+"')"
        logging.info(selectCompSQL)
        createComplainRasterFeature(selectCompSQL,InputFeatures,POI,ComplainSheetMonth)
        print "crarte tmp...end"
        print "insert begin..."
        dataGis2Table(ComplainSheetMonth,InsertDataMonth)
        print "insert end..."
    except Exception,e:
        print e
        logging.error(e)
        os._exit(0)
        
